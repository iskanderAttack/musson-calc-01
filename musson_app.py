import streamlit as st
import math
import matplotlib.pyplot as plt
import pandas as pd
from datetime import timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω",
    page_icon="üî•",
    layout="wide"
)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ (—Ç–µ–ø–ª–æ–ø—Ä–æ–≤–æ–¥–Ω–æ—Å—Ç—å, –í—Ç/–º¬∑–ö) ---
MATERIALS = {
    "–∫–∏—Ä–ø–∏—á": 0.81,
    "–≥–∞–∑–æ–±–ª–æ–∫": 0.12,
    "–¥–µ—Ä–µ–≤–æ": 0.18,
    "—Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å": 0.04,
    "–∫–µ—Ä–∞–º–∑–∏—Ç –±–ª–æ–∫": 0.43,
    "–ø–µ–Ω–æ–±–µ—Ç–æ–Ω": 0.14
}

# --- –ú–æ–¥–µ–ª–∏ "–ú—É—Å—Å–æ–Ω" ---
MUSSON_MODELS = {
    "–ú—É—Å—Å–æ–Ω 300": {"volume_l": 77, "price": 45000},
    "–ú—É—Å—Å–æ–Ω 600": {"volume_l": 125, "price": 65000},
    "–ú—É—Å—Å–æ–Ω 1000": {"volume_l": 200, "price": 85000},
    "–ú—É—Å—Å–æ–Ω 1500": {"volume_l": 311, "price": 110000},
    "–ú—É—Å—Å–æ–Ω 2000": {"volume_l": 467, "price": 135000},
}

# --- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ —Ç–µ–ø–ª–æ—Ç–≤–æ—Ä–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
FUEL_TYPES = {
    "—Ö–≤–æ–π–Ω—ã–µ": {"density": 350, "q": 17, "price_per_ton": 2500},
    "–±–µ—Ä—ë–∑–∞": {"density": 450, "q": 18, "price_per_ton": 3500},
    "–¥—É–±": {"density": 550, "q": 19.5, "price_per_ton": 5000},
    "—è—Å–µ–Ω—å": {"density": 520, "q": 19.0, "price_per_ton": 4500},
    "–õ–î–°–ü": {"density": 650, "q": 16.5, "price_per_ton": 1500},
    "–î–°–ü": {"density": 680, "q": 16.0, "price_per_ton": 1200},
    "—Ñ–∞–Ω–µ—Ä–∞": {"density": 600, "q": 16.8, "price_per_ton": 1800},
    "–º–µ–±–µ–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã": {"density": 550, "q": 15.5, "price_per_ton": 1000},
    "—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã": {"density": 500, "q": 14.0, "price_per_ton": 800}
}

def calc_heat_loss(area_m2, height_m, wall_thickness_m, material, t_in, t_out, 
                   windows_m2=0, doors_m2=0, roof_insulation=True):
    """–†–∞—Å—á—ë—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å —Å —É—á—ë—Ç–æ–º –æ–∫–æ–Ω, –¥–≤–µ—Ä–µ–π –∏ –∫—Ä—ã—à–∏"""
    volume_m3 = area_m2 * height_m
    
    # –¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ —Å—Ç–µ–Ω—ã
    lambda_wall = MATERIALS[material]
    r_wall = wall_thickness_m / lambda_wall
    wall_area = 2 * height_m * (math.sqrt(area_m2) * 4) - windows_m2 - doors_m2  # —É–ø—Ä–æ—â—ë–Ω–Ω–æ
    q_walls = wall_area * (t_in - t_out) / r_wall
    
    # –¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ –æ–∫–Ω–∞ (–ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ)
    q_windows = windows_m2 * (t_in - t_out) / 0.4  # R‚âà0.4 –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ–∫–æ–Ω
    
    # –¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ –¥–≤–µ—Ä–∏
    q_doors = doors_m2 * (t_in - t_out) / 0.6  # R‚âà0.6 –¥–ª—è –¥–≤–µ—Ä–µ–π
    
    # –¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ –∫—Ä—ã—à—É
    roof_r = 0.2 if not roof_insulation else 1.0
    q_roof = area_m2 * (t_in - t_out) / roof_r
    
    # –¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ —á–µ—Ä–µ–∑ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é (–ø—Ä–∏–º–µ—Ä–Ω–æ 0.3 –í—Ç/–º¬≥¬∑–ö)
    q_vent = 0.3 * volume_m3 * (t_in - t_out)
    
    total_w = q_walls + q_windows + q_doors + q_roof + q_vent
    return total_w / 1000  # –∫–í—Ç

def musson_power(volume_l, fill_fraction, fuel_type, efficiency, burn_hours):
    """–†–∞—Å—á—ë—Ç –º–æ—â–Ω–æ—Å—Ç–∏ –∏ —ç–Ω–µ—Ä–≥–∏–∏ –æ—Ç –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏"""
    vol_m3 = volume_l / 1000
    filled_vol_m3 = vol_m3 * fill_fraction
    m_fuel = filled_vol_m3 * FUEL_TYPES[fuel_type]["density"]
    q_fuel = m_fuel * FUEL_TYPES[fuel_type]["q"]  # –ú–î–∂
    q_kwh = q_fuel / 3.6
    useful_kwh = q_kwh * efficiency
    p_kw = useful_kwh / burn_hours
    return useful_kwh, p_kw, m_fuel

def calculate_fuel_consumption(heat_loss_kw, working_hours, fuel_energy_kwh_per_kg):
    """–†–∞—Å—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å"""
    daily_heat_kwh = heat_loss_kw * working_hours
    return daily_heat_kwh / fuel_energy_kwh_per_kg

# --- Streamlit UI ---
st.title("üî• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–∞ –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–π –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–º–µ—â–µ–Ω–∏–π")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º
st.sidebar.header("üè≠ –•–ê–†–ê–ö–¢–ï–†–ò–°–¢–ò–ö–ò –ü–û–ú–ï–©–ï–ù–ò–Ø")
st.sidebar.markdown("---")

col1, col2 = st.sidebar.columns(2)
with col1:
    area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)", 20, 500, 100)
with col2:
    height_m = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)", 2.0, 5.0, 3.5)

material = st.sidebar.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()))
wall_thickness = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (—Å–º)", 10, 100, 40) / 100

st.sidebar.markdown("---")
st.sidebar.header("ü™ü –û–ö–û–ù–ù–´–ï –ò –î–í–ï–†–ù–´–ï –ü–†–û–Å–ú–´")
windows_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", 0, 50, 10)
doors_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", 0, 10, 3)
roof_insulation = st.sidebar.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω–∞—è –∫—Ä—ã—à–∞", value=False)

st.sidebar.markdown("---")
st.sidebar.header("üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ù–´–ô –†–ï–ñ–ò–ú")
col1, col2 = st.sidebar.columns(2)
with col1:
    t_in = st.sidebar.slider("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 10, 25, 18)
with col2:
    t_out = st.sidebar.slider("–ù–∞—Ä—É–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -50, 10, -15)

st.sidebar.markdown("---")
st.sidebar.header("‚ö° –†–ï–ñ–ò–ú –†–ê–ë–û–¢–´")
working_hours = st.sidebar.selectbox("–†–∞–±–æ—á–∏–π –¥–µ–Ω—å (—á–∞—Å–æ–≤)", [8, 12, 16], index=0)

st.sidebar.markdown("---")
st.sidebar.header("ü™µ –ü–ê–†–ê–ú–ï–¢–†–´ –¢–û–ü–õ–ò–í–ê")
fuel_type = st.sidebar.selectbox("–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", list(FUEL_TYPES.keys()))
fill_fraction = st.sidebar.slider("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ø–∫–∏ (%)", 50, 100, 90) / 100
efficiency = st.sidebar.slider("–ö–ü–î –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–≥–æ –∫–æ—Ç–ª–∞ (%)", 70, 95, 85) / 100
burn_hours = st.sidebar.selectbox("–í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ (—á)", [2, 4, 6, 12], index=2)

# --- –†–∞—Å—á—ë—Ç ---
heat_loss_kw = calc_heat_loss(area_m2, height_m, wall_thickness, material, 
                             t_in, t_out, windows_m2, doors_m2, roof_insulation)

volume_m3 = area_m2 * height_m

st.header("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–ß–Å–¢–ê")

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("–¢–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ –∑–¥–∞–Ω–∏—è", f"{heat_loss_kw:.1f} –∫–í—Ç")
with col2:
    st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ—â–Ω–æ—Å—Ç—å", f"{heat_loss_kw * 1.2:.1f} –∫–í—Ç")
with col3:
    st.metric("–û–±—ä—ë–º –ø–æ–º–µ—â–µ–Ω–∏—è", f"{volume_m3:.0f} –º¬≥")

# –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å
with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä—å"):
    st.write(f"‚Ä¢ –ß–µ—Ä–µ–∑ —Å—Ç–µ–Ω—ã: {heat_loss_kw * 0.6:.1f} –∫–í—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 60%)")
    st.write(f"‚Ä¢ –ß–µ—Ä–µ–∑ –æ–∫–Ω–∞ –∏ –¥–≤–µ—Ä–∏: {heat_loss_kw * 0.25:.1f} –∫–í—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 25%)")
    st.write(f"‚Ä¢ –ß–µ—Ä–µ–∑ –∫—Ä—ã—à—É: {heat_loss_kw * 0.1:.1f} –∫–í—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 10%)")
    st.write(f"‚Ä¢ –ù–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é: {heat_loss_kw * 0.05:.1f} –∫–í—Ç (–ø—Ä–∏–º–µ—Ä–Ω–æ 5%)")

# –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
st.subheader("üî• –°–†–ê–í–ù–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ú–£–°–°–û–ù")

results = []
for model, params in MUSSON_MODELS.items():
    useful_kwh, p_kw, m_fuel = musson_power(params["volume_l"], fill_fraction, 
                                           fuel_type, efficiency, burn_hours)
    results.append({
        "model": model, 
        "power": p_kw, 
        "energy": useful_kwh, 
        "fuel_per_load": m_fuel,
        "volume_l": params["volume_l"],
        "price": params["price"]
    })

# –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
df = pd.DataFrame(results)
df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"] = df["power"] >= heat_loss_kw * 1.2
df["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"] = df["–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ"].map({True: "‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç", False: "‚ùå –ú–∞–ª–æ–º–æ—â–Ω–∞"})

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
display_df = df[["model", "power", "fuel_per_load", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]].copy()
display_df.columns = ["–ú–æ–¥–µ–ª—å", "–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)", "–¢–æ–ø–ª–∏–≤–∞ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è"]
display_df["–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)"] = display_df["–ú–æ—â–Ω–æ—Å—Ç—å (–∫–í—Ç)"].round(1)
display_df["–¢–æ–ø–ª–∏–≤–∞ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)"] = display_df["–¢–æ–ø–ª–∏–≤–∞ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É (–∫–≥)"].round(1)

st.dataframe(display_df, use_container_width=True)

# –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –º–æ—â–Ω–æ—Å—Ç—å)
fig, ax = plt.subplots(figsize=(10, 6))

models = [r["model"] for r in results]
powers = [r["power"] for r in results]
colors = ['green' if p >= heat_loss_kw * 1.2 else 'red' for p in powers]

ax.bar(models, powers, color=colors, alpha=0.7)
ax.axhline(y=heat_loss_kw * 1.2, color="blue", linestyle="--", 
           label=f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {heat_loss_kw * 1.2:.1f} –∫–í—Ç")
ax.set_ylabel("–ú–æ—â–Ω–æ—Å—Ç—å, –∫–í—Ç")
ax.set_title("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π")
ax.legend()
ax.tick_params(axis='x', rotation=45)
ax.grid(axis='y', alpha=0.3)

plt.tight_layout()
st.pyplot(fig)

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
st.subheader("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")

suitable_models = [r for r in results if r["power"] >= heat_loss_kw * 1.2]

if suitable_models:
    best_model = min(suitable_models, key=lambda x: x["price"])
    st.success(f"**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –º–æ–¥–µ–ª—å: {best_model['model']}**")
    
    st.write("**–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:**")
    st.write(f"‚Ä¢ –ú–æ—â–Ω–æ—Å—Ç—å: {best_model['power']:.1f} –∫–í—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è {heat_loss_kw * 1.2:.1f} –∫–í—Ç)")
    st.write(f"‚Ä¢ –í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏: –¥–æ {burn_hours} —á–∞—Å–æ–≤")
    st.write(f"‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ –∑–∞–∫–ª–∞–¥–∫—É: {best_model['fuel_per_load']:.1f} –∫–≥")
    st.write(f"‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {best_model['price']:,} —Ä—É–±.".replace(',', ' '))
    
    # –†–∞—Å—á—ë—Ç —Ä–∞—Å—Ö–æ–¥–∞ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    fuel_energy_kwh_kg = (FUEL_TYPES[fuel_type]["q"] / 3.6) * efficiency
    daily_fuel_kg = calculate_fuel_consumption(heat_loss_kw, working_hours, fuel_energy_kwh_kg)
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–ª–∞–¥–æ–∫ –≤ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å
    loads_per_day = max(1, math.ceil(working_hours / burn_hours))
    
    st.write("**–†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –∑–∞ —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å:**")
    st.write(f"‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è: {working_hours} —á–∞—Å–æ–≤")
    st.write(f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–ª–∞–¥–æ–∫: {loads_per_day}")
    st.write(f"‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –¥–µ–Ω—å: {daily_fuel_kg:.1f} –∫–≥")
    st.write(f"‚Ä¢ –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞ –≤ –º–µ—Å—è—Ü (22 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è): {daily_fuel_kg * 22:.0f} –∫–≥")
    st.write(f"‚Ä¢ –ó–∞ –æ—Ç–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å–µ–∑–æ–Ω (7 –º–µ—Å—è—Ü–µ–≤): {daily_fuel_kg * 22 * 7:.0f} –∫–≥")
    
    # –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è
    fuel_price_per_kg = FUEL_TYPES[fuel_type]["price_per_ton"] / 1000
    daily_cost = daily_fuel_kg * fuel_price_per_kg
    monthly_cost = daily_cost * 22
    seasonal_cost = monthly_cost * 7
    
    st.write("**–≠–∫–æ–Ω–æ–º–∏–∫–∞ –æ—Ç–æ–ø–ª–µ–Ω–∏—è:**")
    st.write(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å: {daily_cost:.0f} —Ä—É–±.")
    st.write(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–æ–ø–ª–µ–Ω–∏—è –≤ –º–µ—Å—è—Ü: {monthly_cost:.0f} —Ä—É–±.")
    st.write(f"‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Å–µ–∑–æ–Ω: {seasonal_cost:.0f} —Ä—É–±.")
    
else:
    st.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø–æ–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–ø–ª–æ–ø–æ—Ç–µ—Ä–∏ –ø—Ä–∏ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö")
    st.write("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**")
    st.write("‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ø–∫–∏ –¥–æ 90-100%")
    st.write("‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–ø–ª–∏–≤–æ —Å –±–æ–ª—å—à–µ–π —Ç–µ–ø–ª–æ—Ç–≤–æ—Ä–Ω–æ–π —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é")
    st.write("‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É—Ç–µ–ø–ª–µ–Ω–∏–µ –∑–¥–∞–Ω–∏—è")
    st.write("‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –≤—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
with st.expander("üí° –°–û–í–ï–¢–´ –ü–û –≠–ö–°–ü–õ–£–ê–¢–ê–¶–ò–ò –î–õ–Ø –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–´–• –ü–û–ú–ï–©–ï–ù–ò–ô"):
    st.write("""
    1. **–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã**: –ó–∞–ø—É—Å–∫–∞–π—Ç–µ –ø–µ—á—å –∑–∞ 1-2 —á–∞—Å–∞ –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
    2. **–ö–∞—á–µ—Å—Ç–≤–æ —Ç–æ–ø–ª–∏–≤–∞**: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—É—Ö–æ–µ —Ç–æ–ø–ª–∏–≤–æ (–≤–ª–∞–∂–Ω–æ—Å—Ç—å –º–µ–Ω–µ–µ 20%)
    3. **–û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞**: –ó–∞–ø–æ–ª–Ω—è–π—Ç–µ —Ç–æ–ø–∫—É –Ω–∞ 90-100% –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    4. **–¢–µ—Ö–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ**: –ß–∏—Å—Ç–∏—Ç–µ –¥—ã–º–æ—Ö–æ–¥ –∏ —Ç–æ–ø–∫—É —Ä–∞–∑ –≤ 2-3 –Ω–µ–¥–µ–ª–∏ –ø—Ä–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏
    5. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –û–±–µ—Å–ø–µ—á—å—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –≤–æ–∫—Ä—É–≥ –ø–µ—á–∏ (–Ω–µ –º–µ–Ω–µ–µ 1 –º–µ—Ç—Ä–∞)
    6. **–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è**: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –ø—Ä–∏—Ç–æ—á–Ω—É—é –≤–µ–Ω—Ç–∏–ª—è—Ü–∏—é –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –≥–æ—Ä–µ–Ω–∏—è
    """)

# Footer
st.markdown("---")
st.markdown("*–†–∞—Å—á—ë—Ç —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–º. –î–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º.*")
