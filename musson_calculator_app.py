import streamlit as st
import math
import matplotlib.pyplot as plt
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω",
    page_icon="üî•",
    layout="wide"
)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ ---
MATERIALS = {
    "–∫–∏—Ä–ø–∏—á": 0.81,
    "–≥–∞–∑–æ–±–ª–æ–∫": 0.12,
    "–¥–µ—Ä–µ–≤–æ": 0.18,
    "—Å—ç–Ω–¥–≤–∏—á-–ø–∞–Ω–µ–ª—å": 0.04,
    "–∫–µ—Ä–∞–º–∑–∏—Ç –±–ª–æ–∫": 0.43,
    "–ø–µ–Ω–æ–±–µ—Ç–æ–Ω": 0.14
}

# --- –ú–æ–¥–µ–ª–∏ "–ú—É—Å—Å–æ–Ω" ---
MUSSON_MODELS = {
    "–ú—É—Å—Å–æ–Ω 300": {"volume_l": 77, "price": 45000},
    "–ú—É—Å—Å–æ–Ω 600": {"volume_l": 125, "price": 65000},
    "–ú—É—Å—Å–æ–Ω 1000": {"volume_l": 200, "price": 85000},
    "–ú—É—Å—Å–æ–Ω 1500": {"volume_l": 311, "price": 110000},
    "–ú—É—Å—Å–æ–Ω 2000": {"volume_l": 467, "price": 135000},
}

# --- –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –∏ —Ç–µ–ø–ª–æ—Ç–≤–æ—Ä–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ ---
WOOD_TYPES = {
    "—Ö–≤–æ–π–Ω—ã–µ": {"density": 350, "q": 17, "price_per_ton": 2500},
    "–±–µ—Ä—ë–∑–∞": {"density": 450, "q": 18, "price_per_ton": 3500},
    "–¥—É–±": {"density": 550, "q": 19.5, "price_per_ton": 5000},
    "–ø–ª–∏—Ç–∞ (–õ–î–°–ü/–î–°–ü/—Ñ–∞–Ω–µ—Ä–∞/OSB/–º–µ–±–µ–ª—å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã)": {"density": 600, "q": 17.5, "price_per_ton": 2000}
}

def calc_heat_loss(area_m2, height_m, wall_thickness_m, material, t_in, t_out, 
                   windows_m2=0, doors_m2=0, roof_insulation=True):
    volume_m3 = area_m2 * height_m
    lambda_wall = MATERIALS[material]
    r_wall = wall_thickness_m / lambda_wall
    wall_area = 2 * height_m * (math.sqrt(area_m2) * 4) - windows_m2 - doors_m2
    q_walls = wall_area * (t_in - t_out) / r_wall
    q_windows = windows_m2 * (t_in - t_out) / 0.4
    q_doors = doors_m2 * (t_in - t_out) / 0.6
    roof_r = 0.2 if not roof_insulation else 1.0
    q_roof = area_m2 * (t_in - t_out) / roof_r
    q_vent = 0.3 * volume_m3 * (t_in - t_out)
    total_w = q_walls + q_windows + q_doors + q_roof + q_vent
    return total_w / 1000  # –∫–í—Ç

def musson_power(volume_l, fill_fraction, wood_type, efficiency, burn_hours):
    vol_m3 = volume_l / 1000
    filled_vol_m3 = vol_m3 * fill_fraction
    m_wood = filled_vol_m3 * WOOD_TYPES[wood_type]["density"]
    q_fuel = m_wood * WOOD_TYPES[wood_type]["q"]
    q_kwh = q_fuel / 3.6
    useful_kwh = q_kwh * efficiency
    p_kw = useful_kwh / burn_hours
    return useful_kwh, p_kw, m_wood

def calculate_fuel_consumption(daily_heat_loss_kwh, wood_energy_kwh_per_kg):
    return daily_heat_loss_kwh / wood_energy_kwh_per_kg

# --- Streamlit UI ---
st.title("üî• –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–æ–¥–±–æ—Ä–∞ –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–π –ø–µ—á–∏ –ú—É—Å—Å–æ–Ω")

st.sidebar.header("üìê –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–¥–∞–Ω–∏—è")
col1, col2 = st.sidebar.columns(2)
with col1:
    area_m2 = st.number_input("–ü–ª–æ—â–∞–¥—å –ø–æ–º–µ—â–µ–Ω–∏—è (–º¬≤)", 20, 500, 100)
with col2:
    height_m = st.number_input("–í—ã—Å–æ—Ç–∞ –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)", 2.0, 5.0, 2.5)

material = st.sidebar.selectbox("–ú–∞—Ç–µ—Ä–∏–∞–ª —Å—Ç–µ–Ω", list(MATERIALS.keys()))
wall_thickness = st.sidebar.slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω (—Å–º)", 10, 100, 40) / 100

st.sidebar.header("ü™ü –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
windows_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –æ–∫–æ–Ω (–º¬≤)", 0, 50, 5)
doors_m2 = st.sidebar.number_input("–ü–ª–æ—â–∞–¥—å –¥–≤–µ—Ä–µ–π (–º¬≤)", 0, 10, 2)
roof_insulation = st.sidebar.checkbox("–£—Ç–µ–ø–ª—ë–Ω–Ω–∞—è –∫—Ä—ã—à–∞", value=True)

st.sidebar.header("üå°Ô∏è –ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è")
col1, col2 = st.sidebar.columns(2)
with col1:
    t_in = st.slider("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", 15, 30, 22)
with col2:
    t_out = st.slider("–ù–∞—Ä—É–∂–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)", -50, 10, -20)

st.sidebar.header("ü™µ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ–ø–ª–∏–≤–∞")
wood_type = st.sidebar.selectbox("–¢–∏–ø —Ç–æ–ø–ª–∏–≤–∞", list(WOOD_TYPES.keys()))
fill_fraction = st.sidebar.slider("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ø–∫–∏ (%)", 50, 100, 85) / 100
efficiency = st.sidebar.slider("–ö–ü–î –ø–∏—Ä–æ–ª–∏–∑–Ω–æ–≥–æ –∫–æ—Ç–ª–∞ (%)", 70, 95, 88) / 100
burn_hours = st.sidebar.selectbox("–í—Ä–µ–º—è –≥–æ—Ä–µ–Ω–∏—è –æ–¥–Ω–æ–π –∑–∞–∫–ª–∞–¥–∫–∏ (—á)", [6, 8, 10, 12], index=2)

# --- –ù–æ–≤–∞—è –æ–ø—Ü–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–ø–ª–∏–≤–∞ ---
use_price_per_m3 = st.sidebar.checkbox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–ø–ª–∏–≤–∞ –≤ –º¬≥", value=False)
if use_price_per_m3:
    fuel_price_m3 = st.sidebar.number_input("–¶–µ–Ω–∞ —Ç–æ–ø–ª–∏–≤–∞ (—Ä—É–±./–º¬≥)", 1000, 10000, 2500)
else:
    fuel_price_per_ton = WOOD_TYPES[wood_type]["price_per_ton"]
